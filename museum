// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";


contract museum is Ownable {

    IERC20 public token;
    IERC1155 public nft;

    uint public votingCount = 1;
    uint public fee = 1 ether;
    uint public voteNeed = 100;

    event DepositedNFT(address who, address nftAddr, uint id, uint amount, uint time);
    event WithdrawNFT(address to, address nftAddr, uint id, uint amount, uint time);
    event TransferOwnership(address from, address to, address nftAddr, uint id, uint amount, uint time);

    constructor (IERC20 _address){
        token = _address;
    }

    struct Voting {
        address owner;
        address nftAddr;
        uint id;
        uint amount;
        uint time;
        uint vote;
        uint comission;
        uint pool;
        uint toBurn;
    }

    mapping(address => mapping (uint => uint)) public lockedTokens; //who -> number of voting -> amount of locked

    mapping(uint => Voting) public numberToVote; //number of voting -> voting
    mapping(uint => address) public numberToOwner; //number of voting to owner

    //Перед стейком пользователь должен сделать Approve
    function createVoting (address _nftAddr, uint _id, uint _amount, uint _time) external payable{
        require(msg.value >= fee, "incorrect fee"); 
        require(msg.sender != address(0) && _time > 0  && _amount > 0);
        nft = IERC1155(_nftAddr);
        nft.safeTransferFrom(msg.sender, address(this), _id, _amount, "");
        numberToVote[votingCount] = Voting(msg.sender, _nftAddr, _id, _amount, block.timestamp+_time, 0, (msg.value/100*95), 0, (msg.value/100*5));
        numberToOwner[votingCount] = msg.sender;
        votingCount++;
        emit DepositedNFT(msg.sender, _nftAddr, _id, _amount, block.timestamp);
    }

    function voteForNFT(uint number, uint amount, bool _for) external {
        require(token.balanceOf(msg.sender) > 0);
        require(block.timestamp < numberToVote[number].time, "voting is finished");
        require(lockedTokens[msg.sender][number] == 0, "Already voted");
        token.transferFrom(msg.sender, address(this), amount);
        lockedTokens[msg.sender][number] = amount;
        numberToVote[number].pool += amount;
        if (_for) {
            numberToVote[number].vote++;
        } else {
            numberToVote[number].vote--;
        }
    }

    function withdrawToken(uint number) external {
        require(block.timestamp > numberToVote[number].time, "Voting is not finished");
        require(lockedTokens[msg.sender][number] > 0, "You didn't vote");
        uint balance = lockedTokens[msg.sender][number];
        uint reward = calcReward(number);
        lockedTokens[msg.sender][number] = 0;
        token.transfer(msg.sender, balance);
        payable(msg.sender).transfer(reward);  
        if (numberToVote[number].toBurn != 0) {
            uint toBurn = numberToVote[number].toBurn;
            numberToVote[number].toBurn = 0;
            payable(address(0)).transfer(toBurn);
        } 
    }

    function calcReward(uint number) internal view returns (uint) {
        uint part = lockedTokens[msg.sender][number] * 1000000 / numberToVote[number].pool;
        return numberToVote[number].comission * part / 1000000;
    }
 
    function withdrawNFT(uint number) external {
        require(numberToVote[number].owner == msg.sender, "Not an owner!");
        require(numberToVote[number].time < block.timestamp, "Still locked");
        nft.safeTransferFrom (address(this), msg.sender, numberToVote[number].id, numberToVote[number].amount, "");
        emit WithdrawNFT(msg.sender, numberToVote[number].nftAddr, numberToVote[number].id, numberToVote[number].amount, block.timestamp);

    }

    function transferOwner(address _newOwner, uint _number) external {
        require(numberToVote[_number].owner == msg.sender, "Not an owner!");
        require(numberToVote[_number].time > block.timestamp, "Still locked");
        numberToVote[_number].owner = _newOwner;
        emit TransferOwnership(msg.sender, _newOwner, numberToVote[_number].nftAddr, numberToVote[_number].id, numberToVote[_number].amount, block.timestamp);
    }

    function changeFee(uint _newFee) external onlyOwner {
        require(_newFee <= 1 ether, "incorrect fee");
        fee = _newFee;
    }

    function changeVoteNeed(uint _voteNeed) external onlyOwner {
        require(_voteNeed > 1, "incorrect vote amount");
        fee = _voteNeed;
    }

    function changeVoteNeed(IERC20 _address) external onlyOwner {
        token = _address;
    }

    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    ) external pure returns (bytes4) {
        return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"));
    }

    function time() external view returns(uint) {
        return block.timestamp;
    }

}
